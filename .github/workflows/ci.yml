name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.12"

jobs:
  lint:
    name: Linting and Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Install dependencies
      run: |
        uv sync --dev --frozen
    
    - name: Run Ruff linting (with fixes)
      run: |
        uv run ruff check src/ tests/ --fix || true
    
    - name: Run Ruff formatting
      run: |
        uv run ruff format src/ tests/
    
    - name: Run MyPy type checking
      run: |
        uv run mypy src/agent/ || true
      continue-on-error: true
    
    - name: Run Bandit security scan
      run: |
        uv run bandit -r src/ || true
      continue-on-error: true

  test:
    name: Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Install dependencies
      run: |
        uv sync --dev --frozen
    
    - name: Run unit tests
      run: |
        uv run pytest tests/ -v --cov=src/agent --cov-report=xml --cov-report=term-missing
      env:
        # Core test environment
        ENVIRONMENT: testing
        TESTING: true
        
        # API Keys (test values)
        GROQ_API_KEY: test_groq_key
        ELEVENLABS_API_KEY: test_elevenlabs_key
        ELEVENLABS_VOICE_ID: test_voice_id
        TOGETHER_API_KEY: test_together_key
        
        # WhatsApp Configuration (test values)
        WHATSAPP_TOKEN: test_whatsapp_token
        WHATSAPP_PHONE_NUMBER_ID: 123456789
        WHATSAPP_VERIFY_TOKEN: test_verify_token
        
        # Database Configuration (test values)
        DATABASE_URL: "sqlite:///:memory:"
        SUPABASE_URL: https://test.supabase.co
        SUPABASE_KEY: test_supabase_key
        
        # Vector Database Configuration (test values)
        QDRANT_URL: memory
        QDRANT_API_KEY: test_qdrant_key
        QDRANT_PORT: 6333
        QDRANT_HOST: localhost

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [lint, test]  # Only run after lint and test pass
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Free up disk space
      run: |
        # Remove unnecessary packages to free up space
        sudo apt-get remove -y '^ghc-.*' || true
        sudo apt-get remove -y '^dotnet-.*' || true
        sudo apt-get remove -y '^llvm-.*' || true
        sudo apt-get remove -y 'php.*' || true
        sudo apt-get remove -y azure-cli google-cloud-cli microsoft-edge-stable google-chrome-stable firefox powershell mono-devel || true
        sudo apt-get autoremove -y
        sudo apt-get clean
        
        # Remove large directories
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf /usr/local/graalvm/
        sudo rm -rf /usr/local/.ghcup/
        sudo rm -rf /usr/local/share/powershell
        sudo rm -rf /usr/local/share/chromium
        sudo rm -rf /usr/local/lib/android
        
        # Show available space
        df -h
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: joi-english-agent:test
        platforms: linux/amd64
        load: false  # Don't load to Docker daemon to save space
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Verify Docker build success
      run: |
        echo "âœ… Docker image built successfully"
        echo "Note: Image testing is skipped in CI to save disk space."
        echo "The image will be fully tested during deployment to Railway."

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
      continue-on-error: true



  deploy-production:
    name: Deploy to Railway Production
    runs-on: ubuntu-latest
    needs: [lint, test, docker-build, security-scan]  # Wait for ALL jobs to pass
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Railway CLI
      run: |
        curl -fsSL https://railway.app/install.sh | sh
        echo "$HOME/.railway/bin" >> $GITHUB_PATH
    
    - name: Deploy to Railway Production
      run: |
        railway up --service whatsapp
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }} 